{"version":3,"file":"assets/js/index.js","mappings":"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","sources":["webpack:///./js/daily-bread-widget/styles.scss","webpack:///./js/upcoming-events-widget/styles.scss","webpack:///../node_modules/css-loader/dist/runtime/api.js","webpack:///../node_modules/css-loader/dist/runtime/getUrl.js","webpack:///../node_modules/css-loader/dist/runtime/sourceMaps.js","webpack:///../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///../node_modules/style-loader/dist/runtime/insertBySelector.js","webpack:///../node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack:///../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack:///../node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack:///../node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/runtime/nonce","webpack:///../node_modules/@firebase/util/dist/index.esm2017.js","webpack:///../node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack:///../node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack:///../node_modules/idb/build/wrap-idb-value.js","webpack:///../node_modules/idb/build/index.js","webpack:///../node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack:///../node_modules/firebase/app/dist/index.esm.js","webpack:///../node_modules/@firebase/database/dist/index.esm2017.js","webpack:///./js/firebase.ts","webpack:///./js/daily-bread-widget/styles.scss?1454","webpack:///./js/htmlTemplateTag.ts","webpack:///./js/bem.ts","webpack:///./js/daily-bread-widget/index.ts","webpack:///./js/upcoming-events-widget/helpers.ts","webpack:///./js/upcoming-events-widget/styles.scss?2883","webpack:///./js/upcoming-events-widget/index.ts","webpack:///./js/daily-bread-widget/helpers.ts","webpack:///./js/index.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".daily-bread-widget__chapter-title{font-size:1.125em;margin:1rem 0;font-weight:800}.daily-bread-widget__verse{font-size:.9em;margin:1em 0 0}.daily-bread-widget__verse-ref{font-weight:bold}.daily-bread-widget:not(.daily-bread-widget--expanded) .daily-bread-widget__verse:nth-child(n+6){display:none}.daily-bread-widget--state-loading .daily-bread-widget__expander,.daily-bread-widget--expanded .daily-bread-widget__expander,.daily-bread-widget--state-errored .daily-bread-widget__expander{display:none}.daily-bread-widget__error_msg{text-align:center}.daily-bread-widget__error_msg .button{margin-top:1em}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./js/daily-bread-widget/styles.scss\"],\"names\":[],\"mappings\":\"AAQI,mCACI,iBAAkB,CAClB,aAAc,CACd,eAAgB,CACnB,2BAGG,cAAe,CACf,cAAe,CAEf,+BACI,gBAAiB,CACpB,iGAGG,YAAa,CAChB,8LAOG,YAAa,CAChB,+BAID,iBAAkB,CADrB,uCAIO,cAAe\",\"sourcesContent\":[\"@import \\\"../_sass/variables\\\";\\n\\n$class-name: \\\"daily-bread-widget\\\";\\n\\n.#{$class-name} {\\n    // This constant should also be changes in /js/daily-bread-widget.js.\\n    $unexpanded-length: 5;\\n\\n    &__chapter-title {\\n        font-size: 1.125em;\\n        margin: 1rem 0;\\n        font-weight: 800;\\n    }\\n\\n    &__verse {\\n        font-size: .9em;\\n        margin: 1em 0 0;\\n\\n        &-ref {\\n            font-weight: bold;\\n        }\\n\\n        .#{$class-name}:not(.#{$class-name}--expanded) &:nth-child(n + #{$unexpanded-length + 1}) {\\n            display: none;\\n        }\\n    }\\n\\n    &__expander {\\n        .#{$class-name}--state-loading &,\\n        .#{$class-name}--expanded &,\\n        .#{$class-name}--state-errored & {\\n            display: none;\\n        }\\n    }\\n\\n    &__error_msg {\\n        text-align: center;\\n\\n        .button {\\n            margin-top: 1em;\\n        }\\n    }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 1 1%27%3E%3Crect x=%270%27 y=%270%27 width=%271%27 height=%271%27 fill=%27%23F6BE6A%27/%3E%3Cpath stroke=%27%23fff%27 stroke-opacity=%27.5%27 stroke-width=%27.005%27 fill=%27none%27 d=%27M-0.03847773843338248 1.705301560974815Q0.24799884945430195 1.5254310773340647 0.35711011562818085 1.423751915454356Q0.4662213818020598 1.3220727535746473 0.6018595526086572 1.2872055432850902Q0.7374977234152545 1.252338332995533 0.8551660308683305 1.113104041090609Q0.9728343383214065 0.9738697491856851 1.0282021598502125 0.8831927525655429Q1.0835699813790185 0.7925157559454006 1.113379404422758 0.6189734599636176Q1.1431888274664974 0.4454311639818347 1.4992762023420692 0.4714894856629578%27/%3E%3Cpath stroke=%27%23fff%27 stroke-width=%27.005%27 stroke-opacity=%27.5%27 fill=%27none%27 d=%27M-0.16157074629257784 1.5822085531156198Q0.17449904683588602 1.4519312747156488 0.20059845180604746 1.2672402516322225Q0.22669785677620893 1.0825492285487963 0.4023354181592057 1.0876814088356388Q0.5779729795422025 1.0928135891224813 0.6539559724315185 0.9118939826537971Q0.7299389653208344 0.7309743761851129 0.8534849941685274 0.7084755868838578Q0.9770310230162206 0.6859767975826028 1.0284053380908589 0.5339993936317184Q1.079779653165497 0.3820219896808341 1.2300821387119631 0.20229542203285183%27/%3E%3Cpath stroke=%27%23fff%27 stroke-width=%27.005%27 stroke-opacity=%27.5%27 fill=%27none%27 d=%27M-0.41861362789706663 1.325165671511131Q-0.2617164396985247 1.0157157881812382 -0.15819966585786951 0.9084421339683058Q-0.05468289201721431 0.8011684797553732 0.07800410669803162 0.7633500973744647Q0.21069110541327757 0.7255317149935562 0.2875436036334733 0.5454816138557519Q0.3643961018536691 0.3654315127179477 0.4516373277173389 0.30662792043266934Q0.5388785535810087 0.24782432814739097 0.6460615407491088 0.15165559628996853Q0.753244527917209 0.05548686443254608 0.9995780467904314 -0.028208669888679705%27/%3E%3Cpath stroke=%27%23fff%27 stroke-width=%27.005%27 stroke-opacity=%27.5%27 fill=%27none%27 d=%27M-0.8642849137937137 0.8794943856144843Q-0.5301135770729493 0.7473186508068138 -0.46891646901606054 0.5977253308101147Q-0.40771936095917183 0.44813201081341564 -0.2262213824750796 0.4591246082013534Q-0.044723403990987426 0.4701172055892912 0.08212573258680099 0.3400637428090796Q0.2089748691645894 0.210010280028868 0.2372734696530927 0.0922640623684232Q0.265572070141596 -0.025482155292021615 0.38755250882962045 -0.1068534356295197Q0.5095329475176449 -0.18822471596701779 0.7271669746448011 -0.30061974203431%27/%3E%3Cpath stroke=%27%23fff%27 stroke-width=%27.005%27 stroke-opacity=%27.5%27 fill=%27none%27 d=%27M-1.0447420372151026 0.6990372621930955Q-0.7441519027571061 0.533280325122657 -0.637692662841834 0.42894913698434123Q-0.5312334229265621 0.32461794884602546 -0.38220399280820627 0.30314199786822676Q-0.23317456268985048 0.28166604689042807 -0.13911589616078696 0.11882211406149165Q-0.045057229631723456 -0.044021818767444765 0.031186607146196144 -0.11382280013847332Q0.10743044392411574 -0.18362378150950187 0.1658597865419602 -0.3285461579171799Q0.2242891291598047 -0.47346853432485797 0.4916482352671088 -0.5361384814120023%27/%3E%3C/svg%3E\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".upcoming-events-widget{display:flex;flex-direction:row}.upcoming-events-widget__no-events,.upcoming-events-widget__loading{padding:1em;width:100%;height:11rem;display:flex;justify-content:center;align-items:center}.upcoming-events-widget__errored{padding:1em;width:100%;height:11rem;display:flex;flex-direction:column;justify-content:center;align-items:center}.upcoming-events-widget__errored .button{margin-top:1em}.upcoming-event{color:#000;box-shadow:0 0 0 1px #EDEEEE;border-radius:0.5em;padding:1rem;width:15rem;height:11rem;flex-shrink:0;display:flex;flex-direction:column;justify-content:space-between;font-size:.9em}.upcoming-event__info-text-name{font-size:1.25em;font-weight:800;margin:0}.upcoming-event__calendar{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.upcoming-event__calendar-icon{color:inherit;font-size:1.5em;margin:-1rem;padding:1rem}.upcoming-event__calendar-icon:hover,.upcoming-event__calendar-icon:focus{color:#DD5450}.upcoming-event:first-of-type{background-image:url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");background-size:cover;box-shadow:none;box-shadow:0 0.25em 0.25em 0 rgba(0,0,0,0.25)}.upcoming-event:first-of-type .upcoming-event__calendar-icon:hover,.upcoming-event:first-of-type .upcoming-event__calendar-icon:focus{color:#fff}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./js/upcoming-events-widget/styles.scss\",\"webpack://./../_sass/variables.scss\"],\"names\":[],\"mappings\":\"AAMA,wBACI,YAAa,CACb,kBAAmB,CAEnB,oEAEI,WAAY,CACZ,UAAW,CACX,YAAa,CACb,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACtB,iCAGG,WAAY,CACZ,UAAW,CACX,YAAa,CACb,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CACvB,kBAAmB,CAPtB,yCAUO,cAAe,CAClB,gBAKL,UCrBwB,CDsBxB,4BC1BwB,CD2BxB,mBAAoB,CACpB,YAAa,CACb,WAAY,CACZ,YAAa,CACb,aAAc,CACd,YAAa,CACb,qBAAsB,CACtB,6BAA8B,CAC9B,cAAe,CAGX,gCACI,gBAAiB,CACjB,eAAgB,CAChB,QAAS,CACZ,0BAID,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,kBAAmB,CAEnB,+BACI,aAAc,CACd,eAAgB,CAChB,YAAa,CACb,YAAa,CAJhB,0EAQO,aC9DO,CD2BvB,8BA6CQ,wDAA84G,CAC94G,qBAAsB,CACtB,eAAgB,CAChB,6CAAoE,CAhD5E,sIAqDgB,UC5Ea\",\"sourcesContent\":[\"@import \\\"../_sass/variables\\\";\\n@import \\\"../_sass/sass-functions\\\";\\n\\n$widget-class-name: \\\"upcoming-events-widget\\\";\\n$event-class-name: \\\"upcoming-event\\\";\\n\\n.#{$widget-class-name} {\\n    display: flex;\\n    flex-direction: row;\\n\\n    &__no-events,\\n    &__loading {\\n        padding: 1em;\\n        width: 100%;\\n        height: 11rem;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    &__errored {\\n        padding: 1em;\\n        width: 100%;\\n        height: 11rem;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n\\n        .button {\\n            margin-top: 1em;\\n        }\\n    }\\n}\\n\\n.#{$event-class-name} {\\n    color: $color-mono-darkest;\\n    box-shadow: 0 0 0 1px $color-mono-lighter;\\n    border-radius: 0.5em;\\n    padding: 1rem;\\n    width: 15rem;\\n    height: 11rem;\\n    flex-shrink: 0;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-between;\\n    font-size: .9em;\\n\\n    &__info-text {\\n        &-name {\\n            font-size: 1.25em;\\n            font-weight: 800;\\n            margin: 0;\\n        }\\n    }\\n\\n    &__calendar {\\n        display: flex;\\n        flex-direction: row;\\n        justify-content: space-between;\\n        align-items: center;\\n\\n        &-icon {\\n            color: inherit;\\n            font-size: 1.5em;\\n            margin: -1rem;\\n            padding: 1rem;\\n\\n            &:hover,\\n            &:focus {\\n                color: $color-primary;\\n            }\\n        }\\n    }\\n\\n    &:first-of-type {\\n        $background-color: $color-secondary;\\n        $line-color: $color-mono-lightest;\\n        $line-opacity: 0.5;\\n        $line-width: 0.005;\\n        background-image: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1 1'%3E%3Crect x='0' y='0' width='1' height='1' fill='#{str-replace(#{$background-color}, '#', '%23')}'/%3E%3Cpath stroke='#{str-replace(#{$line-color}, '#', '%23')}' stroke-opacity='#{$line-opacity}' stroke-width='#{$line-width}' fill='none' d='M-0.03847773843338248 1.705301560974815Q0.24799884945430195 1.5254310773340647 0.35711011562818085 1.423751915454356Q0.4662213818020598 1.3220727535746473 0.6018595526086572 1.2872055432850902Q0.7374977234152545 1.252338332995533 0.8551660308683305 1.113104041090609Q0.9728343383214065 0.9738697491856851 1.0282021598502125 0.8831927525655429Q1.0835699813790185 0.7925157559454006 1.113379404422758 0.6189734599636176Q1.1431888274664974 0.4454311639818347 1.4992762023420692 0.4714894856629578'/%3E%3Cpath stroke='#{str-replace(#{$line-color}, '#', '%23')}' stroke-width='#{$line-width}' stroke-opacity='#{$line-opacity}' fill='none' d='M-0.16157074629257784 1.5822085531156198Q0.17449904683588602 1.4519312747156488 0.20059845180604746 1.2672402516322225Q0.22669785677620893 1.0825492285487963 0.4023354181592057 1.0876814088356388Q0.5779729795422025 1.0928135891224813 0.6539559724315185 0.9118939826537971Q0.7299389653208344 0.7309743761851129 0.8534849941685274 0.7084755868838578Q0.9770310230162206 0.6859767975826028 1.0284053380908589 0.5339993936317184Q1.079779653165497 0.3820219896808341 1.2300821387119631 0.20229542203285183'/%3E%3Cpath stroke='#{str-replace(#{$line-color}, '#', '%23')}' stroke-width='#{$line-width}' stroke-opacity='#{$line-opacity}' fill='none' d='M-0.41861362789706663 1.325165671511131Q-0.2617164396985247 1.0157157881812382 -0.15819966585786951 0.9084421339683058Q-0.05468289201721431 0.8011684797553732 0.07800410669803162 0.7633500973744647Q0.21069110541327757 0.7255317149935562 0.2875436036334733 0.5454816138557519Q0.3643961018536691 0.3654315127179477 0.4516373277173389 0.30662792043266934Q0.5388785535810087 0.24782432814739097 0.6460615407491088 0.15165559628996853Q0.753244527917209 0.05548686443254608 0.9995780467904314 -0.028208669888679705'/%3E%3Cpath stroke='#{str-replace(#{$line-color}, '#', '%23')}' stroke-width='#{$line-width}' stroke-opacity='#{$line-opacity}' fill='none' d='M-0.8642849137937137 0.8794943856144843Q-0.5301135770729493 0.7473186508068138 -0.46891646901606054 0.5977253308101147Q-0.40771936095917183 0.44813201081341564 -0.2262213824750796 0.4591246082013534Q-0.044723403990987426 0.4701172055892912 0.08212573258680099 0.3400637428090796Q0.2089748691645894 0.210010280028868 0.2372734696530927 0.0922640623684232Q0.265572070141596 -0.025482155292021615 0.38755250882962045 -0.1068534356295197Q0.5095329475176449 -0.18822471596701779 0.7271669746448011 -0.30061974203431'/%3E%3Cpath stroke='#{str-replace(#{$line-color}, '#', '%23')}' stroke-width='#{$line-width}' stroke-opacity='#{$line-opacity}' fill='none' d='M-1.0447420372151026 0.6990372621930955Q-0.7441519027571061 0.533280325122657 -0.637692662841834 0.42894913698434123Q-0.5312334229265621 0.32461794884602546 -0.38220399280820627 0.30314199786822676Q-0.23317456268985048 0.28166604689042807 -0.13911589616078696 0.11882211406149165Q-0.045057229631723456 -0.044021818767444765 0.031186607146196144 -0.11382280013847332Q0.10743044392411574 -0.18362378150950187 0.1658597865419602 -0.3285461579171799Q0.2242891291598047 -0.47346853432485797 0.4916482352671088 -0.5361384814120023'/%3E%3C/svg%3E\\\");\\n        background-size: cover;\\n        box-shadow: none;\\n        box-shadow: 0 .25em .25em 0 transparentize($color-mono-darkest, .75);\\n\\n        & .#{$event-class-name}__calendar-icon {\\n            &:hover,\\n            &:focus {\\n                color: $color-mono-lightest;\\n            }\\n        }\\n    }\\n}\",\"// Breakpoints\\n$mobile: \\\"(max-width: 767px)\\\";\\n$desktop: \\\"(min-width: 768px)\\\";\\n\\n$page-side-padding-desktop: 5rem;\\n$page-side-padding-mobile: 1rem;\\n$page-column-separation: 3.5rem;\\n\\n$color-primary: #DD5450;\\n$color-secondary: #F6BE6A;\\n$color-mono-light: #CDCFCF;\\n$color-mono-lighter: #EDEEEE;\\n$color-mono-lightest: #FFFFFF;\\n// $color-mono-dark: #DEADBEEF;\\n$color-mono-darker: #1F2120;\\n$color-mono-darkest: #000000;\\n\\n$Karla: 'Karla', sans-serif;\\n\\n%button-base {\\n    padding: .75em 1em;\\n    border-radius: 1.5em;\\n    border: 0;\\n    cursor: pointer;\\n    white-space: nowrap;\\n    text-decoration: none;\\n    font-weight: 500;\\n    font-size: .9rem;\\n\\n    &:not(.fa):not(.fa-regular):not(.fa-brands):not(.fa-solid):not(.fa-light) {\\n        font-family: inherit;\\n    }\\n}\\n\\n%button-hover-shadow {\\n    @extend %button-base;\\n    transition: box-shadow .15s ease-in-out;\\n\\n    &:hover,\\n    &:focus {\\n        box-shadow: 0 .25em .25em 0 rgba(0,0,0,.25);\\n    }\\n}\\n\\n%button-hover-darken {\\n    @extend %button-base;\\n    transition: background-color .15s ease-in-out;\\n\\n    &:hover,\\n    &:focus {\\n        background-color: rgba(0,0,0,.1);\\n    }\\n\\n    &:active {\\n        background-color: rgba(0,0,0,.25);\\n    }\\n}\\n\\n@mixin minor-column-base($percentage: 50%) {\\n    flex-basis: calc(#{$percentage} - #{$page-column-separation});\\n}\\n\\n@mixin minor-column($side, $percentage: 50%) {\\n    @include minor-column-base($percentage);\\n    @if $side == left {\\n        padding-right: $page-column-separation;\\n\\n        @media #{$mobile} {\\n            padding-right: 0;\\n            flex-basis: initial;\\n        }\\n    } @else if $side == right {\\n        padding-left: $page-column-separation;\\n\\n        @media #{$mobile} {\\n            padding-left: 0;\\n            flex-basis: initial;\\n        }\\n    }\\n}\\n\\n@mixin major-column-base($percentage: 50%) {\\n    flex-basis: $percentage;\\n\\n    @media #{$mobile} {\\n        flex-basis: initial;\\n    }\\n}\\n\\n@mixin major-column($side, $percentage: 50%) {\\n    @include major-column-base($percentage);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  }\n\n  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them\n\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n\n  if (options.hash) {\n    url += options.hash;\n  } // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n\n\n  if (/[\"'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return \"\\\"\".concat(url.replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\"), \"\\\"\");\n  }\n\n  return url;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t613: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","__webpack_require__.nc = undefined;","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.33\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.10.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* IDB_GET */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* IDB_WRITE */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.10.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.6\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { initializeApp, getApps } from \"firebase/app\";\nexport { getDatabase } from \"firebase/database\";\n/**\n * Initializes Firebase. If Firebase has already been initialized, this function does nothing.\n */\nexport var initFirebase = function () {\n    // Only initialize if Firebase hasn't been initialized already.\n    if (getApps().length === 0) {\n        initializeApp({\n            apiKey: \"AIzaSyCxDl12rgil0SFWpRWYB-CibPiZfBJR_tc\",\n            authDomain: \"scs-app-backend-481f8.firebaseapp.com\",\n            databaseURL: \"https://scs-app-backend-481f8-default-rtdb.firebaseio.com\",\n            projectId: \"scs-app-backend-481f8\",\n            storageBucket: \"scs-app-backend-481f8.appspot.com\",\n            messagingSenderId: \"476719591689\",\n            appId: \"1:476719591689:web:00bd04d59492bbb8cfe3d8\",\n            measurementId: \"G-52SQH82S7J\",\n        });\n    }\n};\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../node_modules/sass-loader/dist/cjs.js??sass!./styles.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../node_modules/sass-loader/dist/cjs.js??sass!./styles.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * A template tag function that does absolutely nothing. It's meant to precede template literals and\n * lets `prettier` know how to format it in the code as HTML.\n * @example\n * ```ts\n * // Just place it right before the opening \"`\":\n * html`\n *   <div>\n *     <h1>Hello World</h1>\n *   </div>\n * `\n * ```\n */\nexport var html = function (strings) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    return String.raw.apply(String, __spreadArray([{ raw: strings }], __read(values), false));\n};\nexport default html;\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/**\n * An interface for interacting with and modifying elements according to the\n * {@link https://getbem.com/ BEM specification}.\n *\n * This function creates a {@link BaseBEMType} object. The function takes an Block name which is\n * applied to the Block element as a class and provides methods and properties for interacting with\n * elements on the page that are associated with this element.\n * @param blockName\n * @returns A {@link BaseBEMType} object that can interact with all Block elements with the given\n *          `blockName`, or can be called with an Element name and/or Modifiers for further\n *          narrowing down the set of elements it selects.\n *\n * @example\n * ```ts\n * const bem = BEM(\"some-block-component\");\n * bem(\"a-nested-element\").className\n * // \"some-block-component__a-nested-element\"\n * bem({ modifier1: true, modifier2: false, modifier3: \"value\" }).className\n * // \"some-block-component some-block-component--modifier1 some-block-component--modifier3-value\";\n * bem(\"another-element\", { modifier4: true }).classes\n * // [\"some-block-component__another-element\", \"some-block-component__another-element--modifier4\"]\n * bem(\"yet-element\").select()\n * // An Array of elements with class name \"some-block-component__yet-element\"\n * bem(\"and-another\").modify({ modifier1: false, modifier2: true });\n * // Modifies \".some-block-component__and-another\" elements:\n * // 1. Removes any \"some-block-component__and-another--modifier1\" classes, if any\n * // 2. Adds a \"some-block-component__and-another--modifier2\" class\n * ```\n */\nvar BEM = function (blockName) {\n    // Make any empty calls to the specifier (i.e., `specifier()`) return the same object instead of\n    // creating a new one each time.\n    var emptySpecifier = null;\n    var specifier = function (elementName, modifiers) {\n        var _a;\n        // Check if only a modifier list/dict was provided, and assume \"\" for the element name.\n        if (typeof elementName === \"object\" && elementName !== null) {\n            modifiers = elementName;\n            elementName = \"\";\n        }\n        if (elementName == null) {\n            elementName = \"\";\n        }\n        if (typeof elementName === \"number\") {\n            elementName = elementName.toString();\n        }\n        var qualifiedElementName = \"\".concat(blockName).concat(elementName === \"\" ? \"\" : \"__\" + elementName);\n        if (modifiers == null) {\n            modifiers = [];\n        }\n        else if (!Array.isArray(modifiers)) {\n            modifiers = Object.entries(modifiers).flatMap(function (_a) {\n                var _b = __read(_a, 2), modifier = _b[0], value = _b[1];\n                return value == null || value === false\n                    ? []\n                    : value === true\n                        ? [modifier]\n                        : [\"\".concat(modifier, \"-\").concat(value)];\n            });\n        }\n        var mappedModifiers = modifiers.map(function (modifier) { return \"\".concat(qualifiedElementName, \"--\").concat(modifier); });\n        // Use the `emptySpecifier` if this function was called with no specifying query.\n        if (elementName === \"\" &&\n            modifiers.length === 0 &&\n            emptySpecifier != null) {\n            return emptySpecifier;\n        }\n        // Set to `null` if `unlock`ed and a set Array of elements (that get returned every time) if\n        // `lock`ed.\n        var lockedCollection = null;\n        // Calculate the list of classes and freeze the Array to prevent tampering.\n        var classes = Object.freeze([qualifiedElementName].concat(mappedModifiers));\n        // Just join the classes to generate the className.\n        var className = classes.join(\" \");\n        var select = function () {\n            return Array.from(lockedCollection\n                ? lockedCollection\n                : document.getElementsByClassName(className));\n        };\n        var modify = function (newModifiers, elements) {\n            var e_1, _a;\n            var elementIter = elements == null\n                ? select()\n                : elements instanceof Element\n                    ? [elements]\n                    : elements;\n            for (var modifier in newModifiers) {\n                // Determine the new modifier class to add.\n                var value = newModifiers[modifier];\n                var newClass = value == null || value === false || value === \"\"\n                    ? null\n                    : value === true\n                        ? modifier\n                        : \"\".concat(modifier, \"-\").concat(value);\n                // Remove any other classes that match this modifier.\n                var re = new RegExp(\"(?:^| )\".concat(qualifiedElementName, \"--\").concat(modifier, \"(?:-[^ ]*)?(?:$| )\"));\n                try {\n                    for (var elementIter_1 = (e_1 = void 0, __values(elementIter)), elementIter_1_1 = elementIter_1.next(); !elementIter_1_1.done; elementIter_1_1 = elementIter_1.next()) {\n                        var element = elementIter_1_1.value;\n                        var match = void 0;\n                        while ((match = element.className.match(re))) {\n                            element.classList.remove(match[0].trim());\n                        }\n                        if (newClass != null) {\n                            element.classList.add(\"\".concat(qualifiedElementName, \"--\").concat(newClass));\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (elementIter_1_1 && !elementIter_1_1.done && (_a = elementIter_1.return)) _a.call(elementIter_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        };\n        var lock = function () {\n            lockedCollection = Array.from(select());\n        };\n        var unlock = function () {\n            lockedCollection = null;\n        };\n        var root = function (element) {\n            for (var current = element; current instanceof Element; current = current.parentNode) {\n                if (current.classList.contains(blockName)) {\n                    return current;\n                }\n            }\n            return null;\n        };\n        return _a = {\n                classes: classes,\n                className: className,\n                select: select,\n                modify: modify,\n                lock: lock,\n                unlock: unlock,\n                root: root\n            },\n            _a[Symbol.iterator] = function () { return select()[Symbol.iterator](); },\n            _a.toString = function () { return className; },\n            _a;\n    };\n    emptySpecifier = specifier();\n    // Merge the `emptySpecifier` (which is of type `NestedBEMType`) into the `specifier` so that it\n    // can be made into a `BaseBEMType`, which is a combination of the two.\n    Object.assign(specifier, emptySpecifier);\n    return specifier;\n};\n// Additionally export a set of already-made BEM objects for common names we use throughout multiple\n// files.\nexport var button = BEM(\"button\");\nexport var pageContent = BEM(\"page-content\");\nexport var imgAspectRatio = BEM(\"img-aspect-ratio\");\nBEM.button = button;\nBEM.pageContent = pageContent;\nBEM.imgAspectRatio = imgAspectRatio;\nexport default BEM;\n","var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { initFirebase } from \"../firebase\";\nimport { getDatabase, ref, get as getRef } from \"firebase/database\";\nimport { localizedDateFormat } from \"./helpers\";\nimport \"./styles.scss\";\nimport html from \"../htmlTemplateTag\";\nimport BEM from \"../bem\";\nvar bem = BEM(\"daily-bread-widget\");\n// This constant should also be changed /css/daily-bread-widget.scss.\nvar UNEXPANDED_LENGTH = 5;\nvar createWidgets = function () {\n    \"use strict\";\n    var e_1, _a;\n    initFirebase();\n    var db = getDatabase();\n    // Set the date on each of the widgets.\n    var now = new Date();\n    var dailyBreadDate = \"\".concat(now.getMonth() + 1, \"/\").concat(now\n        .getDate()\n        .toString()\n        .padStart(2, \"0\"));\n    try {\n        for (var _b = __values(bem(\"date\")), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var date = _c.value;\n            date.textContent = dailyBreadDate;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    var fetchDailyBread = function () {\n        var e_2, _a, e_3, _b;\n        bem.modify({ state: \"loading\" });\n        try {\n            for (var _c = __values(bem(\"chapter-title\")), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var title = _d.value;\n                title.textContent = \"Loading...\";\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        try {\n            for (var _e = __values(bem(\"verses\")), _f = _e.next(); !_f.done; _f = _e.next()) {\n                var verseContainer = _f.value;\n                verseContainer.innerHTML = \"\";\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        getRef(ref(db, \"dailyBread/\".concat(localizedDateFormat(now))))\n            .then(function (snapshot) {\n            if (!snapshot.exists()) {\n                // If there is no Daily Bread in the DB for today, show a message for that.\n                return {\n                    ref: \"No Daily Bread today :(\",\n                    refLong: \"No Daily Bread today :(\",\n                    numVerses: 0,\n                    verses: [],\n                };\n            }\n            var dailyBread = snapshot.val();\n            return fetch(\"../assets/bible/\".concat(dailyBread.bookName, \".json\"))\n                .then(function (data) { return data.json(); })\n                .then(function (book) { return book.chapters[dailyBread.chapterIdx]; });\n        })\n            .then(function (chapter) {\n            var e_4, _a, e_5, _b, e_6, _c;\n            var versesHTML = chapter.verses\n                .map(function (verse) { return html(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n              <p class=\\\"\", \"\\\">\\n                <span class=\\\"\", \"\\\">\", \"</span>\\n                <span class=\\\"\", \"\\\">\", \"</span>\\n              </p>\\n            \"], [\"\\n              <p class=\\\"\", \"\\\">\\n                <span class=\\\"\", \"\\\">\", \"</span>\\n                <span class=\\\"\", \"\\\">\", \"</span>\\n              </p>\\n            \"])), bem(\"verse\"), bem(\"verse-ref\"), verse.ref, bem(\"verse-text\"), verse.text); })\n                .join(\"\");\n            try {\n                for (var _d = __values(bem(\"chapter-title\")), _e = _d.next(); !_e.done; _e = _d.next()) {\n                    var title = _e.value;\n                    title.textContent = chapter.refLong;\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            try {\n                for (var _f = __values(bem(\"verses\")), _g = _f.next(); !_g.done; _g = _f.next()) {\n                    var verseContainer = _g.value;\n                    verseContainer.innerHTML = versesHTML;\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n            var _loop_1 = function (expander) {\n                expander.removeAttribute(\"disabled\");\n                BEM.button.modify({ disabled: false }, expander);\n                expander.addEventListener(\"click\", function () {\n                    bem.modify({ expanded: true }, bem.root(expander));\n                });\n            };\n            try {\n                for (var _h = __values(bem(\"expander\")), _j = _h.next(); !_j.done; _j = _h.next()) {\n                    var expander = _j.value;\n                    _loop_1(expander);\n                }\n            }\n            catch (e_6_1) { e_6 = { error: e_6_1 }; }\n            finally {\n                try {\n                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);\n                }\n                finally { if (e_6) throw e_6.error; }\n            }\n            bem.modify({ state: \"loaded\" });\n            bem.modify({\n                expanded: chapter.verses.length <= UNEXPANDED_LENGTH,\n            });\n        })\n            .catch(function (e) {\n            var e_7, _a, e_8, _b;\n            // Output the error to console for debugging.\n            console.error(e);\n            var div = document.createElement(\"div\");\n            div.classList.add(bem(\"error_msg\").className);\n            div.innerHTML = html(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n          <div>There was a problem getting today's Daily Bread.</div>\\n          <button\\n            class=\\\"\", \"\\\"\\n          >\\n            Try again\\n          </button>\\n        \"], [\"\\n          <div>There was a problem getting today's Daily Bread.</div>\\n          <button\\n            class=\\\"\", \"\\\"\\n          >\\n            Try again\\n          </button>\\n        \"])), BEM.button({\n                bg: \"primary\",\n                hover: \"shadow\",\n                text: \"lightest\",\n            }));\n            bem.modify({ state: \"errored\" });\n            try {\n                for (var _c = __values(bem(\"chapter-title\")), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var title = _d.value;\n                    title.textContent = \"An error occurred.\";\n                }\n            }\n            catch (e_7_1) { e_7 = { error: e_7_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_7) throw e_7.error; }\n            }\n            try {\n                for (var _e = __values(bem(\"verses\")), _f = _e.next(); !_f.done; _f = _e.next()) {\n                    var verseContainer = _f.value;\n                    verseContainer.textContent = \"\";\n                    var clone = div.cloneNode(true);\n                    var button = clone.querySelector(\"button\");\n                    button.addEventListener(\"click\", fetchDailyBread);\n                    verseContainer.appendChild(clone);\n                }\n            }\n            catch (e_8_1) { e_8 = { error: e_8_1 }; }\n            finally {\n                try {\n                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                }\n                finally { if (e_8) throw e_8.error; }\n            }\n        });\n    };\n    fetchDailyBread();\n};\nexport default createWidgets;\nvar templateObject_1, templateObject_2;\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Returns a Date object that has the same date as the passed in Date, but with its time normalized\n * to 12:00 AM.\n * @param date The Date (or Date argument) to copy and normalize.\n * @returns A copy of the passed in Date with its time set to 12:00 AM.\n */\nexport var normalizedDate = function () {\n    var date = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        date[_i] = arguments[_i];\n    }\n    var copy = new (Date.bind.apply(Date, __spreadArray([void 0], __read(date), false)))();\n    copy.setHours(0, 0, 0, 0);\n    return copy;\n};\nvar formatShortDateIntl = new Intl.DateTimeFormat([], { month: 'short', day: 'numeric' });\nvar formatShortDateAndTimeIntl = new Intl.DateTimeFormat([], { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' });\n/**\n * Formats a date into a shortened time string.\n * @param date The Date to format the time for.\n * @param ampm Whether the include the \"am\"/\"pm\" suffix.\n * @returns The formatted time string.\n */\nexport var formatShortTime = function (date, ampm) {\n    return \"\".concat((date.getHours() % 12) || 12).concat(date.getMinutes() === 0 ? '' : ':' + date.getMinutes().toString().padStart(2, '0')).concat(ampm ? date.getHours() < 12 ? 'am' : 'pm' : '');\n};\n/**\n * Formats a date into a shortened date string.\n * @param date The Date to format the date for.\n * @returns The formatted date string.\n */\nexport var formatShortDate = function (date) {\n    return formatShortDateIntl.format(date);\n};\n/**\n * Formats a date into a shortened date and time string.\n * @param date The Date to format the date and time for.\n * @returns The formatted date and time string.\n */\nexport var formatShortDateAndTime = function (date) {\n    return formatShortDateAndTimeIntl.format(date);\n};\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../node_modules/sass-loader/dist/cjs.js??sass!./styles.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../node_modules/sass-loader/dist/cjs.js??sass!./styles.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { formatShortDate, formatShortDateAndTime, formatShortTime, normalizedDate, } from \"./helpers\";\nimport \"./styles.scss\";\nimport BEM from \"../bem\";\nimport html from \"../htmlTemplateTag\";\nvar widgetBem = BEM(\"upcoming-events-widget\");\nvar eventBem = BEM(\"upcoming-event\");\nvar createWidgets = function () {\n    \"use strict\";\n    /**\n     * The API endpoint for retrieving upcoming events.\n     */\n    var ENDPOINT = \"https://scs-app-backend-481f8.web.app/api/v1/events\";\n    var widgetContainers = widgetBem.select();\n    var fetchEvents = function () {\n        var e_1, _a;\n        var now = new Date();\n        var today = normalizedDate(now);\n        widgetBem.modify({ state: \"loading\" });\n        try {\n            for (var widgetContainers_1 = __values(widgetContainers), widgetContainers_1_1 = widgetContainers_1.next(); !widgetContainers_1_1.done; widgetContainers_1_1 = widgetContainers_1.next()) {\n                var widget = widgetContainers_1_1.value;\n                widget.innerHTML = html(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"<div class=\\\"\", \"\\\">\\n        Loading...\\n      </div>\"], [\"<div class=\\\"\", \"\\\">\\n        Loading...\\n      </div>\"])), widgetBem(\"loading\"));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (widgetContainers_1_1 && !widgetContainers_1_1.done && (_a = widgetContainers_1.return)) _a.call(widgetContainers_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        fetch(ENDPOINT)\n            .then(function (response) { return response.json(); })\n            .then(function (response) {\n            var events = \"events\" in response && response.events ? response.events : [];\n            return events.map(function (event) {\n                var _a, _b, _c, _d, _e, _f;\n                var daysDiff;\n                var timeString;\n                var allDayEvent = typeof ((_a = event.start) === null || _a === void 0 ? void 0 : _a.date) === \"string\" &&\n                    typeof ((_b = event.end) === null || _b === void 0 ? void 0 : _b.date) === \"string\";\n                if (allDayEvent) {\n                    var _g = __read((((_c = event.start) === null || _c === void 0 ? void 0 : _c.date) || \"\").split(\"-\"), 3), startYear = _g[0], startMonth = _g[1], startDate = _g[2];\n                    var _h = __read((((_d = event.end) === null || _d === void 0 ? void 0 : _d.date) || \"\").split(\"-\"), 3), endYear = _h[0], endMonth = _h[1], endDate = _h[2];\n                    var eventStartDate = normalizedDate(new Date(+startYear, +startMonth - 1, +startDate));\n                    var eventEndDate = normalizedDate(new Date(+endYear, +endMonth - 1, +endDate - 1));\n                    daysDiff = Math.round((eventStartDate.valueOf() - today.valueOf()) /\n                        (1000 * 60 * 60 * 24));\n                    // Check if this event spans multiple days.\n                    if (eventStartDate.valueOf() !== eventEndDate.valueOf()) {\n                        // Check if this event spans into another month.\n                        if (eventStartDate.getMonth() !== eventEndDate.getMonth()) {\n                            timeString = \"\".concat(formatShortDate(eventStartDate), \" to \").concat(formatShortDate(eventEndDate), \", all-day\");\n                        }\n                        else {\n                            timeString = \"\".concat(formatShortDate(eventStartDate), \"\\u2013\").concat(eventEndDate.getDate(), \", all-day\");\n                        }\n                    }\n                    else {\n                        timeString = \"\".concat(formatShortDate(eventStartDate), \", all-day\");\n                    }\n                }\n                else {\n                    var eventStartDateTime = new Date(((_e = event.start) === null || _e === void 0 ? void 0 : _e.dateTime) || new Date());\n                    var eventStartDate = normalizedDate(eventStartDateTime);\n                    var eventEndDateTime = new Date(((_f = event.end) === null || _f === void 0 ? void 0 : _f.dateTime) || new Date());\n                    var eventEndDate = normalizedDate(eventEndDateTime);\n                    daysDiff = Math.round((eventStartDate.valueOf() - today.valueOf()) /\n                        (1000 * 60 * 60 * 24));\n                    // Check if this event spans multiple days.\n                    if (eventStartDate.valueOf() !== eventEndDate.valueOf()) {\n                        timeString = \"\".concat(formatShortDate(eventStartDateTime), \" to \").concat(formatShortDateAndTime(eventEndDateTime));\n                    }\n                    else {\n                        timeString = \"\".concat(formatShortDate(eventStartDate), \" from \").concat(formatShortTime(eventStartDateTime, eventStartDateTime.getHours() < 12 !==\n                            eventEndDateTime.getHours() < 12), \"\\u2013\").concat(formatShortTime(eventEndDateTime, true));\n                    }\n                }\n                return {\n                    name: event.summary,\n                    time: timeString,\n                    location: event.location,\n                    subject: event.description,\n                    daysToEvent: daysDiff <= 0\n                        ? \"Today\"\n                        : daysDiff === 1\n                            ? \"Tomorrow\"\n                            : \"In \".concat(daysDiff, \" days\"),\n                    link: event.htmlLink,\n                };\n            });\n        })\n            .then(function (events) {\n            return events.map(function (event) {\n                var div = document.createElement(\"div\");\n                div.classList.add(eventBem.className);\n                div.innerHTML = html(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n            <div class=\\\"\", \"\\\">\\n              <h3 class=\\\"\", \"\\\">\", \"</h3>\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n            </div>\\n            <div class=\\\"\", \"\\\">\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n            </div>\\n            <div class=\\\"\", \"\\\">\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n              <a\\n                href=\\\"\", \"\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"external noreferrer\\\"\\n                class=\\\"\", \" fa-regular fa-calendar\\\"\\n              ></a>\\n            </div>\\n          \"], [\"\\n            <div class=\\\"\", \"\\\">\\n              <h3 class=\\\"\", \"\\\">\", \"</h3>\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n            </div>\\n            <div class=\\\"\", \"\\\">\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n            </div>\\n            <div class=\\\"\", \"\\\">\\n              <div class=\\\"\", \"\\\">\\n                \", \"\\n              </div>\\n              <a\\n                href=\\\"\", \"\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"external noreferrer\\\"\\n                class=\\\"\", \" fa-regular fa-calendar\\\"\\n              ></a>\\n            </div>\\n          \"])), eventBem(\"info-text\"), eventBem(\"info-text-name\"), event.name, eventBem(\"info-text-time\"), event.time || \"\", eventBem(\"info-text-location\"), event.location || \"\", eventBem(\"subject\"), eventBem(\"subject-text\"), event.subject || \"\", eventBem(\"calendar\"), eventBem(\"calendar-text\"), event.daysToEvent || \"\", event.link, eventBem(\"calendar-icon\"));\n                return div;\n            });\n        })\n            .then(function (eventElements) {\n            var e_2, _a;\n            var isEmpty = eventElements.length === 0;\n            if (isEmpty) {\n                var div = document.createElement(\"div\");\n                div.classList.add(\"\".concat(widgetBem(\"no-events\")));\n                div.innerText = \"No upcoming events. Check back later for more!\";\n                eventElements.push(div);\n            }\n            var elementClones = Array.from({\n                length: widgetContainers.length,\n            });\n            elementClones[0] = eventElements;\n            for (var i = 1; i < widgetContainers.length; i++) {\n                elementClones[i] = Array.from({ length: eventElements.length });\n                for (var j = 0; j < eventElements.length; j++) {\n                    elementClones[i][j] = eventElements[j].cloneNode(true);\n                }\n            }\n            // Add a class indicating whether the widget has events or not.\n            widgetBem.modify({ empty: isEmpty, filled: !isEmpty });\n            for (var i = 0; i < widgetContainers.length; i++) {\n                // Clear the widget container's children.\n                widgetContainers[i].textContent = \"\";\n                try {\n                    // Insert each event one-by-one.\n                    for (var _b = (e_2 = void 0, __values(elementClones[i])), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var element = _c.value;\n                        widgetContainers[i].appendChild(element);\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        })\n            .catch(function () {\n            var div = document.createElement(\"div\");\n            div.classList.add(widgetBem(\"errored\").className);\n            div.innerHTML = html(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n          <div>There was a problem getting the events.</div>\\n          <button\\n            class=\\\"\", \"\\\"\\n          >\\n            Try again\\n          </button>\\n        \"], [\"\\n          <div>There was a problem getting the events.</div>\\n          <button\\n            class=\\\"\", \"\\\"\\n          >\\n            Try again\\n          </button>\\n        \"])), BEM.button({\n                bg: \"primary\",\n                text: \"lightest\",\n                hover: \"shadow\",\n            }));\n            widgetBem.modify({ state: \"errored\" });\n            for (var i = 0; i < widgetContainers.length; i++) {\n                // Clear the widget container's children.\n                widgetContainers[i].textContent = \"\";\n                var clone = div.cloneNode(true);\n                var button = clone.querySelector(\"button\");\n                button.addEventListener(\"click\", fetchEvents);\n                widgetContainers[i].appendChild(clone);\n            }\n        });\n    };\n    fetchEvents();\n};\nexport default createWidgets;\nvar templateObject_1, templateObject_2, templateObject_3;\n","/**\n * Formats a Date object into a string in the format MM D, YYYY.\n * @param date The Date to format.\n * @returns The formatted date.\n */\nexport var localizedDateFormat = function (date) {\n    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][date.getMonth()];\n    var day = date.getDate();\n    var year = date.getFullYear();\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n};\n","import createDailyBreadWidgets from \"./daily-bread-widget\";\nimport createUpcomingEventsWidgets from \"./upcoming-events-widget\";\ncreateDailyBreadWidgets();\ncreateUpcomingEventsWidgets();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","___CSS_LOADER_URL_IMPORT_0___","URL","___CSS_LOADER_URL_REPLACEMENT_0___","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","url","options","String","__esModule","default","test","slice","hash","needQuotes","replace","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","sourceURLs","sources","source","sourceRoot","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","call","b","baseURI","self","location","href","nc","assertion","message","assertionError","stringToByteArray$1","str","out","p","c","charCodeAt","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","decodeString","bytes","pos","c1","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","base64Decode","console","error","deepCopy","value","deepExtend","constructor","Date","getTime","reject","resolve","promise","Promise","wrapCallback","callback","catch","isMobileCordova","navigator","FirebaseError","code","customData","super","name","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","fullCode","template","PATTERN","_","replaceTemplate","fullMessage","jsonEval","parse","decode","token","header","claims","signature","parts","split","fn","contextObj","res","deepEqual","aKeys","keys","bKeys","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","lengthMinusBlock","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","transformCachableValue","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","tx","sort","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","request","success","then","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","idbGetError","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","s","ln","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","display","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","CONSTANTS","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","defineProperties","MAX","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","forEach","arrayVal","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRecordContainsPath_","writeRecord","writeTreeDefaultFilter_","writeTreeLayerTree_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","visibleWrites","writeId","allWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","completeServerData","nodes","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcIndexedSlice","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessor","changePath","writesCache","accumulator","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","viewProcessorApplyServerOverwrite","oldViewCache","changedSnap","completeCache","filterServerNode","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyUserOverwrite","viewProcessorCacheHasChild","viewProcessorApplyMerge","viewProcessorApplyServerMerge","changedChildren","viewMergeTree","curViewCache","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","viewApplyOperation","operation","viewProcessorApplyUserMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","viewProcessorApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncPointHasCompleteView","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","lastWriteId","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeResetTree_","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removed","hadCompleteView","viewQueryId","_repo","syncPointRemoveEventRegistration","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointAddEventRegistration","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","EventQueue","eventLists_","recursionDepth_","eventQueueRaiseEventsForChangedPath","eventQueue","changedPath","eventDataList","currList","getPath","eventQueueQueueEvents","sentAll","eventList","eventListRaise","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","resolveDeferredValueTree","repoGetAncestorTransactionNode","transactionNode","treeForEachAncestor","repoAbortTransactionsOnNode","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","lastSent","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","childRef","exists","hasChildren","callbackContext","ValueEventRegistration","cached","serverCacheNode","syncTreeGetServerValue","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","process","env","authTokenProvider","isValidRootPathString","validateUrl","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_root","_rootInternal","repoInterrupt","repoManagerDeleteRepo","_checkNotDeleted","apiName","simpleListen","echo","onEcho","registerDatabase","__read","Symbol","ar","__spreadArray","pack","arguments","l","strings","__values","BEM","blockName","emptySpecifier","specifier","elementName","modifiers","qualifiedElementName","flatMap","_b","modifier","mappedModifiers","lockedCollection","classes","freeze","className","select","getElementsByClassName","modify","newModifiers","elements","e_1","elementIter","Element","newClass","re","elementIter_1","elementIter_1_1","classList","trim","e_1_1","return","lock","unlock","current","contains","pageContent","imgAspectRatio","button","__makeTemplateObject","cooked","templateObject_1","templateObject_2","normalizedDate","setHours","formatShortDateIntl","Intl","DateTimeFormat","month","day","formatShortDateAndTimeIntl","hour","minute","formatShortTime","ampm","getHours","getMinutes","padStart","formatShortDate","format","widgetBem","eventBem","templateObject_3","widgetContainers","fetchEvents","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","getApp","heartbeatController","triggerHeartbeat","_getProvider","getDatabase","dailyBreadDate","getMonth","getDate","_c","textContent","fetchDailyBread","e_2","e_3","year","state","_d","e_2_1","_e","_f","e_3_1","getFullYear","refLong","numVerses","verses","dailyBread","fetch","bookName","book","chapters","chapterIdx","chapter","e_4","e_5","e_6","versesHTML","verse","text","e_4_1","_g","e_5_1","_loop_1","expander","removeAttribute","disabled","expanded","_h","_j","e_6_1","e_7","e_8","div","bg","hover","e_7_1","verseContainer","clone","cloneNode","e_8_1","today","widgetContainers_1","widgetContainers_1_1","daysDiff","timeString","end","startYear","startMonth","startDate","endYear","endMonth","endDate","eventStartDate","eventEndDate","eventStartDateTime","dateTime","eventEndDateTime","summary","subject","description","daysToEvent","link","htmlLink","eventElements","innerText","elementClones","filled"],"sourceRoot":""}