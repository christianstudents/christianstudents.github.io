/**
 * Fetches posts from an Instagram account.
 * user (String) – The name of the Instagram user to get posts from.
 * numPosts (Number) – The number of posts to fetch.
 * forEachPost (Function) – A callback that gets passed each post individually.
 *   index (Number) – The index of the current post being processed by the callback.
 *   shortcode (String) – The post's shortcode (the part in the post's URL that identifies the post).
 *   altText (String) – The alt text for the image (usually auto-generated by Instagram).
 *   dimensions (Object) – The dimensions of the post's image.
 *     dimensions.height (Number) – The image's height.
 *     dimensions.width (Number) – The image's width.
 *   caption – The post's caption.
 *   likes (Number) The number of likes the post has.
 *   comments (Number) – The number of comments the post has.
 *   timestamp (Date) – The date/time the post was posted.
 *   data (Object) – All of the data related to the post as returned by Instagram.
 * done (Function) – A callback that gets called with no arguments if all the posts were fetched successfully.
 * failed (Function) – A callback that gets called with three arguments if a problem occurs while fetching the posts.
 *   err (Error) – The error that triggered the failed callback.
 *   reason (Number) – A number indicating what type of error occurred.
 *   reasons (Enum) – A mapping of the possible reasons that could have occurred.
 */
(function instagramFeed(user, numPosts, forEachPost, done, failed) {
	var reasonsEnum = {
		HTTP_ERROR: 1,
		PROCESSING_ERROR: 2,
		CALLBACK_ERROR: 3
	};

	// Fetch the user's page on instagram.com.
	new Promise(function(accept, reject) {
		var xhr = new XMLHttpRequest();
		xhr.open("GET", "https://instagram.com/" + user);
		xhr.addEventListener("readystatechange", function() {
			if (this.readyState == 4) {
				if (this.status == 200) {
					accept(this);
				} else {
					reject(this);
				}
			}
		});
		xhr.send();
	}).then(function(xhr) {
		// The page was fetched successfully.
		try {
			// Parse a <script> in the returned HTML that describes the posts on the page (prone to change in the future if Instagram updates it).
			var data = JSON.parse(xhr.responseText.match(/<script[^>]*?>.*?_sharedData\s*=\s*(\{.*\}).*?<\/script>/)[1]);
			var edges = data.entry_data.ProfilePage[0].graphql.user.edge_owner_to_timeline_media.edges;
			var posts = edges.map(function(edge) {
				return edge.node.shortcode;
			});
			numPosts = Math.min(numPosts, posts.length);

			// The posts have been retrieved now.
			// Call forEachPost on each one. 
			for (let i = 0;i < numPosts; i++) {
				try {
					forEachPost(
						i,
						edges[i].node.shortcode,
						edges[i].node.accessibility_caption,
						edges[i].node.dimensions,
						edges[i].node.edge_media_to_caption.edges[0].node.text,
						edges[i].node.edge_liked_by.count,
						edges[i].node.edge_media_to_comment.count,
						new Date(edges[i].node.taken_at_timestamp * 1000),
						edges[i]
					);
				} catch (err) {
					// If an error occurs while processing one of the posts, the failed callback is called.
					failed(err, reasonsEnum.CALLBACK_ERROR, reasonsEnum);
				}
			}
			// All of the posts were processed successfully.
			// Call the done callback.
			done();
			return;
		} catch (err) {
			failed(err, reasonsEnum.PROCESSING_ERROR, reasonsEnum);
		}
	}).catch(function(err) {
		// The page could not be fetched (maybe the user's page does not exist?).
		failed(err, reasonsEnum.HTTP_ERROR, reasonsEnum);
	});
})(
	"stanfordchristianstudents", // https://www.instagram.com/stanfordchristianstudents
	6, // Fetch 6 posts
	function forEachPost(index, shortcode, altText, dimensions, caption, likes, comments, timestamp, data) {
		// Get the element on the page associated with this post.
		var post = document.querySelector("[data-ig-post-index=\"" + index + "\"]");
		// Get the <img> in that element.
		var img = post.querySelector("img");
		// Add an listener to the image that checks that the image actually loads.
		img.addEventListener("error", function() {
			// Hide all the posts of the image fails to load.
			var list = document.getElementById("recent-posts").classList;
			list.replace("fetching", "failed");
			list.replace("succeeded", "failed");
		});
		// Set its src to be the image thumbnail.
		img.src = "https://instagram.com/p/" + shortcode + "/media?size=l";
		// Set its alt text to be that of the original photo.
		img.alt = altText;
		// Make the link go to the original post.
		post.querySelector(".link-orig-post").href = "https://instagram.com/p/" + shortcode;
		// Show the number of likes...
		post.querySelector(".interactions .likes").innerText = likes;
		// ... and comments.
		post.querySelector(".interactions .comments").innerText = comments;
		// Show the date it was posted as a formatted string.
		post.querySelector(".date span").innerText = 
			["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][timestamp.getDay()] + " " +
			["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][timestamp.getMonth()] + " " +
			"00".substr(timestamp.getDate().toString().length) + timestamp.getDate().toString() + ", " +
			timestamp.getFullYear();

		// Show the caption.
		if (caption.length > 120) {
			// If it is longer than 120 character, show the first 100 only with a Show More button.
			post.querySelector(".caption .preview").innerText = caption.substr(0, 100).replace(/\s*$/, "") + "\u2026 ";
			// Make the button clickable.
			post.querySelector(".caption .more").addEventListener("click", function() {
				this.previousElementSibling.innerText = caption;
				this.classList.add("hidden");
			});
		} else {
			// Show the entire caption otherwise.
			post.querySelector(".caption .preview").innerText = caption;
			post.querySelector(".caption .more").classList.add("hidden");
		}
	},
	function done() {
		// Add a .succeeded class to indicate the posts finished processing.
		document.getElementById("recent-posts").classList.replace("fetching", "succeeded");
	},
	function failed(err, reason, reasons) {
		// Add a .failed class to indicate the posts did not finish processing.
		document.getElementById("recent-posts").classList.replace("fetching", "failed");
	}
);